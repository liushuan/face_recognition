import argparse
import os
import sys
import cv2
import struct

import onnxruntime
import numpy as np
import math


class FaceExtract:
    def __init__(self, onnx_file, in_width, in_height, device="cpu"):
        self.onnx_file = onnx_file
        self.in_width = in_width
        self.in_height = in_height
        self.input_size    = (in_height, in_width)      # (heigth, width)
        self.mean          = (0.0, 0.0, 0.0)
        self.std           = (1.0, 1.0, 1.0)

        self.device = device
        self.session = self.model_init(self.device)
        
    def model_init(self, device="cpu"):
        if device == "gpu":
            session = onnxruntime.InferenceSession(self.onnx_file, providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
        else:
            session = onnxruntime.InferenceSession(self.onnx_file, providers=['CPUExecutionProvider'])
        return session

    def normlize_feature(self, feature):
        sum = 0
        for i in range(len(feature)):
            sum += feature[i]*feature[i]
        sum = math.sqrt(sum)
        for i in range(len(feature)):
            feature[i] = feature[i] / sum
        return sum

    def image_preprocess(self, img, swap=(2, 0, 1)):
        image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        image = (image - 127.5) / 127.5
        image = image.transpose(swap)
        image = np.ascontiguousarray(image, dtype=np.float32)
        return image

    def forward(self, image):
        p_img = self.image_preprocess(image)
        ort_inputs = {self.session.get_inputs()[0].name: p_img[None, :, :, :]}
        output = self.session.run(None, ort_inputs)
        feature=output[0][0]
        xnorm = self.normlize_feature(feature)
        return feature, xnorm
    

if __name__ == '__main__':

    reg_model = r'models/model_r28.onnx'
    face_extract = FaceExtract(reg_model, 112, 112, device='cpu')
    img = cv2.imread('imgs/warpface.jpg')
    feature, norm =  face_extract.forward(img)
    print(norm)
    print(feature)
    
    feature2 = [0.032291,0.0183436,0.0507034,0.0301573,-0.0285192,0.00811782,0.00712996,-0.00476972,0.00611627,-0.0455205,-0.0399489,0.0590908,-0.018768,-0.0271853,0.0081057,-0.0503559,0.0893944,-0.0246288,-0.044893,0.020269,0.0308522,-0.0326285,-0.0357666,-0.000671872,-0.0697447,-0.0287094,0.0214981,0.0959574,0.0567967,-0.0324292,0.0272824,0.0274838,-0.132419,0.0624172,0.00918556,-0.0391382,-0.0658617,0.0137232,-0.0394969,-0.0344275,0.0765565,0.0172734,-0.03859,0.074767,0.0448109,0.0346091,-0.0182685,0.0519835,0.0216262,-0.0188176,-0.0450781,0.0290036,-0.0591134,-0.0404479,-0.03752,-0.0119823,0.0211569,-0.00614785,0.0131366,-0.0460389,0.130968,-0.0256008,-0.0127427,0.00741973,-0.0231123,-0.0717298,0.00519955,0.0174877,-0.00730202,-0.0446334,0.0132946,0.0413339,0.0209658,-0.0192618,0.0293145,0.00401313,-0.105314,-0.0112493,-0.0493232,-0.00984306,0.00786667,-0.00817667,-0.0148485,-0.042415,-0.100478,-0.0546141,0.00142014,0.013147,-0.065557,-0.036553,-0.0864534,0.00609192,0.0359748,0.0483846,-0.0466524,0.00944014,0.0130796,0.0442689,0.0511319,-0.0131574,0.00306107,0.0374935,-0.0620731,0.0910309,0.00857049,-0.0330849,-0.0176544,0.00145412,-0.014532,-0.00411336,0.0151234,0.0384801,0.0454723,0.0250415,0.0520498,0.031427,0.00929992,0.0421387,-0.0104622,0.0176134,0.0515441,-0.0447307,0.0660561,-0.0675456,0.0298068,0.0412499,-0.0121201,-0.0806708,0.0422248,-0.00708862,-0.0105703,-0.0706363,-0.0682559,0.0287049,-0.0428621,-0.00135529,-0.0273533,0.0322025,-0.0549527,-0.0314705,0.0705202,-0.0190052,-0.00324337,0.00318134,-0.0259508,-0.0640113,0.0284831,0.00840294,0.0409404,-0.00223037,-0.0211689,0.105615,-0.0546815,0.0211334,-0.02713,-0.0560555,0.0225331,-0.0623755,0.0806615,-0.0395945,0.00883665,-0.0513895,0.00488476,0.104522,0.0156859,0.00708262,-0.00432874,0.0615156,0.00281384,-0.00687044,-0.0899387,-0.0333661,-0.0140287,0.029338,-0.0140923,0.0120729,-0.00199043,-0.0511906,-0.015387,-0.074015,0.0420477,0.0608351,-0.00173212,-0.0115511,0.00497559,-1.56074e-05,0.00572663,0.0279661,-0.06488,0.00889193,-0.0411046,0.0666517,0.0718788,0.0307022,0.0122179,0.0482048,0.0168935,0.046965,-0.00126583,-0.0628281,0.026389,0.0537775,-0.0320582,-0.0338179,-0.0997693,-0.0450436,-0.0429937,0.000137512,-0.132166,-0.0459486,-0.0255829,0.03222,-0.00517854,0.091911,-0.0592701,0.00575123,-0.0704655,0.0557317,0.0151906,-0.0272047,0.0172203,0.0693896,0.00160612,0.000216145,-0.0508682,0.0121871,-0.000191654,-0.0601894,-0.0114142,-0.00233877,-0.0310701,0.0217836,-0.033369,0.0494682,-0.0476328,0.0153052,-0.0800781,-0.0136743,-0.0119996,0.0743083,0.0395729,0.0125564,0.0592053,0.0689817,-0.024752,-0.0289086,-0.0535148,-0.0168203,0.117155,0.0119098,-0.0579448,0.0248643,-0.02648,0.0596581,-0.0109439,0.0274167,-0.00692345,-0.0110695,0.0384539,0.0180787,-0.0136304,0.000272217,-0.0748875,-0.00623258,-0.036405,0.0732455,-0.0186617,-0.0167395,0.0208582,0.0423572,-0.0401724,0.0701732,-0.0131719,0.0588325,-0.0451354,0.00635988,-0.0364805,-0.099337,-0.0535373,-0.0745341,-0.0167076,-0.0364627,-0.0261881,-0.0490571,0.0159633,0.00302885,0.0540945,0.015919,0.0561203,0.0974856,-0.00435001,0.0614851,0.0247414,-0.0715895,0.0236208,-0.00749039,-0.00589502,-0.00813998,0.00377614,0.00069538,-0.0492052,-0.0169997,0.0402722,-0.00218059,-0.00931905,-0.042207,0.0050186,-0.14029,0.0401854,-0.0438205,0.0199879,0.0831244,0.00495195,-0.0194842,-0.0191876,-0.0759598,0.0672944,-0.0353478,-0.0220772,-0.0181733,-0.00492129,-0.0274385,0.0181827,0.0360884,-0.00323841,-0.00667777,-0.0330624,0.0197319,0.0341382,-0.0422922,0.0177,0.055788,-0.0274338,-0.0286474,-0.079513,-0.0258714,0.0201299,0.0137631,-0.0971102,-0.026212,0.0241014,0.0555412,0.0217365,0.0226921,-0.0213441,0.059146,-0.0251716,0.0237558,-0.0875937,-0.00405043,-0.0530625,0.0372791,-0.0439032,-0.0137699,-0.0183366,0.042736,0.0348111,0.0208357,-0.0384372,0.0380912,0.0152042,0.0989626,0.0129692,-0.00971688,-0.0319149,0.0612414,-0.0192183,-0.0243689,0.0383438,0.033528,0.0564819,0.0329455,0.00107405,-0.086809,-0.00190996,-0.00872817,0.0247705,0.0596477,0.0484149,-0.0885089,-0.00259818,-0.0412002,-0.0603447,-0.0649747,0.00193751,-0.0137165,-0.0783684,-0.00522765,-0.0379573,0.0876784,-0.0160074,-0.0200202,0.0944627,-0.0249638,0.0425698,-0.00685199,0.054672,-0.0562391,-0.0325822,0.0165836,0.00487507,0.0900167,0.0829047,0.0345679,0.0359319,-0.00232233,-0.0763501,-0.00687543,-0.0001073,-0.0371117,0.0279487,0.0051535,0.0342073,-0.0215857,0.0165169,-0.0372781,0.0126139,0.0203577,-0.0266707,-0.0666012,0.0102201,-0.0359684,-0.00556598,0.106631,0.0367783,-0.0678528,-0.00968492,0.0123221,-0.0254173,-0.0188007,0.0258914,-0.0680218,-0.0256019,0.00874818,0.0658475,0.0218148,0.014978,0.0168648,-0.00901981,0.0572568,-0.0199733,-0.00472036,-0.0189436,-0.0640327,-0.011717,-0.00722981,-0.0330149,0.0479401,-0.0431254,0.0546669,-0.100877,0.00985372,-0.0111085,0.0281001,-0.0380546,-0.0297744,-0.0763654,-0.0457218,-0.116619,0.0740465,0.068097,-0.0196767,0.0469161,3.4985e-05,0.0465302,-0.108167,0.0230205,-0.0478514,-0.0665951,-0.030884,-0.0105978,0.00944754,0.012541,-0.0412564,0.0942458,0.0332545,-0.02317,-0.00303343,-0.0247855,0.057741,0.0535886,-0.0678557,0.0254918,-0.037747,0.0488867,-0.0653843,-0.0310843,0.0165858,0.0152265,-0.000462651,0.0234664,0.0131409,0.0204455,-0.013015,0.0311424,-0.0310327,-0.0322423,0.0133826,-0.0397032,-0.0054422,-0.00973768,0.0133947,0.0257866,-0.0734009,0.0123717,0.0311253,-0.0463216,0.00915417,-0.0383835,0.00438407,0.0794341,-0.00028076]
    feature2 = np.array(feature2)
    
    print((feature * feature2).sum())